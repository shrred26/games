[{"C:\\react\\snake\\src\\index.js":"1","C:\\react\\snake\\src\\reportWebVitals.js":"2","C:\\react\\snake\\src\\hooks\\useArrow.js":"3","C:\\react\\snake\\src\\Routes.js":"4","C:\\react\\snake\\src\\snake\\index.js":"5","C:\\react\\snake\\src\\flappy\\index.js":"6"},{"size":509,"mtime":1608457657784,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":711,"mtime":1607859811975,"results":"10","hashOfConfig":"8"},{"size":485,"mtime":1608459160401,"results":"11","hashOfConfig":"8"},{"size":3286,"mtime":1609569067199,"results":"12","hashOfConfig":"8"},{"size":5239,"mtime":1609568323861,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1lf35zp",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"C:\\react\\snake\\src\\index.js",[],["31","32"],"C:\\react\\snake\\src\\reportWebVitals.js",[],"C:\\react\\snake\\src\\hooks\\useArrow.js",["33"],"import {useState,useEffect} from 'react';\r\n\r\nexport default () => {\r\n\r\n    const [dir,setDir] = useState('ArrowRight');\r\n\r\n    useEffect(()=>{\r\n        const detectKeyStroke = e=>{\r\n          if(e.keyCode>=37&&e.keyCode<=40){\r\n            if(dir===e.key) return;\r\n            if((dir===\"ArrowRight\"&&e.key===\"ArrowLeft\")||(dir===\"ArrowLeft\"&&e.key===\"ArrowRight\")) return;\r\n            if((dir===\"ArrowDown\"&&e.key===\"ArrowUp\")||(dir===\"ArrowUp\"&&e.key===\"ArrowDown\")) return;\r\n            setDir(e.key);\r\n          }\r\n        }\r\n        document.addEventListener('keydown',detectKeyStroke);\r\n        return ()=>{document.removeEventListener('keydown',detectKeyStroke);}\r\n      },[dir]);\r\n\r\n      return dir;\r\n}","C:\\react\\snake\\src\\Routes.js",["34","35"],"import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Snake from \"./snake\";\r\nimport Flappy from './flappy'\r\n\r\nexport default () => (\r\n        <Router>\r\n            <Switch>\r\n                <Route path='/snake'>\r\n                    <Snake/>\r\n                </Route>\r\n                <Route path='/flappy'>\r\n                    <Flappy/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n)","C:\\react\\snake\\src\\snake\\index.js",["36"],"import './index.css';\nimport {useEffect, useState, useRef, useReducer} from 'react';\nimport useArrow from '../hooks/useArrow'\n\nconst size = 16;\n\nconst getGrid = (size) => {\n  let array = [];\n  const midElem = Math.trunc((size-1)/2);\n  for(let i=0;i<size;i++){\n    let subArray = [];\n    for(let j=0;j<size;j++){\n      (i === (midElem)&&j === midElem )? subArray.push(1): subArray.push(0);\n    }\n    array.push(subArray);\n  }\n  const {x,y} = getFood(array);\n  const newArr = updateGrid(x,y,2,array);\n  return newArr;\n}\n\nconst getColor = (value,index1,index2) => {\n  if(value===0) return (index1*size+index2+index1)%2===0?'dark':'light';\n  else if(value===1) return 'blue';\n  return 'red';\n}\n\nconst getFood = (grid) => {\n  const x = Math.floor(Math.random()*size);\n  const y = Math.floor(Math.random()*size);\n  if(grid[x][y]===1) return getFood(grid);\n  else return {x,y}\n}\n\nconst updateGrid = (row,col,val,grid) => {\n  return [...grid.slice(0,row),\n    [...grid[row].slice(0,col),val,...grid[row].slice(col+1)]\n    ,...grid.slice(row+1)];\n}\n\nconst directions = {\n  ArrowUp: [-1,0],\n  ArrowDown: [1,0],\n  ArrowLeft: [0,-1],\n  ArrowRight: [0,1]\n}\n\nconst getHigh = () =>(window.localStorage.getItem('highScore')||0);\n\nconst reducer = (state,newState) => ({...state,...newState})\nconst getInitialState = (size) => ({grid:getGrid(size),snake:[[Math.trunc((size-1)/2),Math.trunc((size-1)/2)]],score:0})\n\nfunction App() {\n  const [error,setError] = useState(false);\n  const [{grid,snake,score},setState] = useReducer(reducer,size,getInitialState);\n  const [high,setHigh] = useState(getHigh)\n  const key = useArrow();\n  const animate = useRef();\n\n  const reset = () => {\n    setError(false);\n    setState(getInitialState(size));\n  }\n\n  useEffect(()=>{\n    if(error) return;\n    clearInterval(animate.current);\n    animate.current = setInterval(()=>{\n      const dir = directions[key];\n      const newX = snake[0][0]+dir[0];\n      const newY = snake[0][1]+dir[1];\n      if(newX>size-1||newX<0||newY>size-1||newY<0||grid[newX][newY]===1){\n        setError('Game Over');\n        clearInterval(animate.current);\n        if(score>high){ \n          window.localStorage.setItem('highScore',score);\n          setHigh(score);\n        }\n        return;\n      }\n      const copy = [...grid];\n      const snakeCopy = [...snake];\n      let eat = false;\n      if(copy[newX][newY]==2) eat = true;\n      snakeCopy.unshift([newX,newY]);\n      copy[newX][newY] = 1;\n      if(!eat){\n        snakeCopy.pop();\n        copy[snake[snake.length-1][0]][snake[snake.length-1][1]] = 0;\n      }else{\n        const {x,y} = getFood(copy);\n        copy[x][y] = 2;\n      }\n      setState({grid:copy,snake:snakeCopy,score: (eat? score+1: score)})\n    },100)\n  })\n\n  return (\n    <div className=\"App\">\n      <div className='flex'>\n        {<h1>{error?error:`Score: ${score}`}</h1>}\n        <button type='button' onClick={reset}>Reset</button>\n        {<h2>{`HighScore: ${high}`}</h2>}\n      </div>\n      <div className=\"container\">\n        {grid.map((item,index1)=>(\n          item.map((subItem,index2)=>(\n            <div \n              className={`gridBlock ${getColor(subItem,index1,index2)}`}\n              key={index1*size+index2}\n             />\n          ))\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\react\\snake\\src\\flappy\\index.js",["37","38","39","40"],"import './index.css'\r\nimport {useEffect, useReducer, useRef, useState} from 'react'\r\n\r\nexport default () => {\r\n    const refY = useRef(window.innerHeight/2);\r\n\r\n    const reducer = (state,action)=>{\r\n        switch(action.type){\r\n            case 'gravity':\r\n                refY.current = state.y+(state.Vy*action.sec);\r\n                return {\r\n                    y: refY.current,\r\n                    Vy: state.Vy-200*action.sec\r\n                }\r\n            \r\n            case 'up':\r\n                return {\r\n                    y: state.y,\r\n                    Vy: action.Vy\r\n                }\r\n    \r\n            case 'setY':\r\n                return {\r\n                    y: action.y,\r\n                    Vy: state.Vy\r\n                }\r\n\r\n            case 'setBoth':\r\n                return {\r\n                    y: action.y,\r\n                    Vy: action.Vy\r\n                }\r\n    \r\n            default:\r\n                return state;    \r\n        }\r\n    }\r\n\r\n    const [{y},setState] = useReducer(reducer,{y:window.innerHeight/2,Vy:0});\r\n    const [columns,setColumns] = useState([]);\r\n    const animateFrame = useRef([]);\r\n    const container = useRef();\r\n    const [score,setScore] = useState(0);\r\n    const [gameOver,setGameOver] = useState(false);\r\n    const gap = 120;\r\n\r\n    useEffect(()=>{\r\n        if(!container) return;\r\n        let start;\r\n        const applyGravity = (timestamp) => {\r\n          if(gameOver) {cancelAnimationFrame(animateFrame.current[0]); return;}\r\n          if (start === undefined) start = timestamp;\r\n          const elapsed = timestamp - start;\r\n          setState({type:'gravity',sec:elapsed/1000});\r\n          start = timestamp;\r\n          animateFrame.current[0] = requestAnimationFrame(applyGravity);\r\n        }\r\n        animateFrame.current[0] = requestAnimationFrame(applyGravity);\r\n        return () => cancelAnimationFrame(animateFrame.current[0]);\r\n    },[container,gameOver]);\r\n    \r\n    useEffect(()=>{\r\n        if(y>window.innerHeight||y<4) setGameOver(true);\r\n    },[y])\r\n\r\n    useEffect(()=>{\r\n        const detectKeyStroke = (e) =>{\r\n            if(e.key===\"ArrowUp\") setState({type:'up',Vy: 120});\r\n        }\r\n        document.addEventListener('keydown',detectKeyStroke);\r\n        return ()=>{document.removeEventListener('keydown',detectKeyStroke);}\r\n      },[]);\r\n\r\n    useEffect(()=>{\r\n        const createColumn = () =>{\r\n            if(gameOver) {clearInterval(animateFrame.current[1]); return;}\r\n            const col1 = window.innerHeight*1/4 + Math.random()*(window.innerHeight*1/2-120);\r\n            const col2 = window.innerHeight - col1 - 120;\r\n            setColumns(columns=>{\r\n                const clone = [...columns, {x:window.innerWidth-30,col1,col2}];\r\n                return clone;\r\n            });\r\n        }\r\n        animateFrame.current[1] = setInterval(createColumn,1000);\r\n        return () =>{clearInterval(animateFrame.current[1]);}\r\n    },[gameOver]);\r\n\r\n    const checkGameOver = (columns) =>{\r\n        columns.forEach((column)=>{\r\n            if(Math.abs(column.x - 80)<13){\r\n                const y= refY.current;\r\n                console.log(y,column.col2,column.col2+gap);\r\n                if(y<column.col2||y>column.col2+gap) {\r\n                    setGameOver(true);\r\n                }\r\n                return;\r\n            }\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        let start;\r\n        const updateColumns = (timestamp) =>{\r\n            if(gameOver) {cancelAnimationFrame(animateFrame.current[2]); return;}\r\n            if(start===undefined) start = timestamp;\r\n            const elapsed = timestamp - start;\r\n            setColumns(columns=>{\r\n                if(columns.length>0) checkGameOver(columns);\r\n                const clone = [...columns].map((column)=>({...column,x:column.x - elapsed*150/1000}));\r\n                if(clone[0]&&clone[0].x<0){ clone.shift(); setScore(sc=>sc+0.5);}\r\n                return clone;\r\n            });\r\n            start = timestamp;\r\n            animateFrame.current[2] = requestAnimationFrame(updateColumns);\r\n        }\r\n        animateFrame.current[2] = requestAnimationFrame(updateColumns);\r\n        return () => cancelAnimationFrame(animateFrame.current[2]);\r\n    },[gameOver])\r\n\r\n    const reset = () =>{\r\n        setColumns([]);\r\n        setState({type:'setBoth',y:window.innerHeight/2,Vy:0});\r\n        setScore(0);\r\n        setGameOver(false);\r\n    }\r\n\r\n    return (\r\n        <div className='sky'>\r\n            <h1 className='score'>{`Score: ${score}`}</h1>\r\n            {gameOver&&<div className='center'>\r\n                <h2>Game Over</h2>\r\n                <button type='button' onClick={reset}>Reset</button>\r\n            </div>}\r\n            <div className='atCenter' style={{transform:`translate(calc(80px - 50%), ${-y}px)`}}>bird</div>\r\n            {columns.map((column,index)=>(\r\n                <div key={index} style={{transform:`translate(${column.x}px,0)`}} className='column'>\r\n                    <div style={{height: `${column.col1}px`}} className='pipe'/>\r\n                    <div style={{height: `120px`}}/>\r\n                    <div style={{height: `${column.col2}px`}} className='pipe'/>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":3,"column":1,"nodeType":"47","endLine":21,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":6,"column":3,"nodeType":"50","messageId":"51","endLine":6,"endColumn":7},{"ruleId":"45","severity":1,"message":"46","line":11,"column":1,"nodeType":"47","endLine":22,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":84,"column":26,"nodeType":"54","messageId":"55","endLine":84,"endColumn":28},{"ruleId":"45","severity":1,"message":"46","line":4,"column":1,"nodeType":"47","endLine":144,"endColumn":2},{"ruleId":"56","severity":1,"message":"57","line":59,"column":56,"nodeType":"50","endLine":59,"endColumn":63},{"ruleId":"56","severity":1,"message":"57","line":85,"column":49,"nodeType":"50","endLine":85,"endColumn":56},{"ruleId":"56","severity":1,"message":"57","line":117,"column":56,"nodeType":"50","endLine":117,"endColumn":63},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","The ref value 'animateFrame.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'animateFrame.current' to a variable inside the effect, and use that variable in the cleanup function.","no-global-assign","no-unsafe-negation"]